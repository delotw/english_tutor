from common.states_classes import Reg, CheckMail, SolveTasks
from features.chatgpt.chatgpt_func import get_score_37
from features.database.db_functions import *
import modules.keyboards.user_keyboadrs as kb
from aiogram import F, Router
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from loguru import logger


# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
router = Router()
user_router = Router()
mark_down = ParseMode.MARKDOWN


@user_router.message(F.text == '/start')
async def send_welcome(message: Message):
    if await check_user_exists(uid=message.from_user.id):
        text = (f"<b>–ü—Ä–∏–≤–µ—Ç, {await get_user_name(uid=message.from_user.id)} üëã</b> \n–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:")
        await message.answer(text=text, reply_markup=kb.main_menu)
    else:
        text = ('–ü—Ä–∏–≤–µ—Ç üëã, –º–µ–Ω—è –∑–æ–≤—É—Ç <b>–¢—å—é—Ç–æ—Ä</b>! \n–ü—Ä–æ–ø–∏—à–∏ /reg –¥–ª—è —Ä–µ–≥–∏—Å—Ç–∞—Ä—Ü–∏–∏!')
        await message.answer(text=text)


@user_router.message(F.text == '/reg')
async def reg_first(message: Message, state: FSMContext):
    text = ('1Ô∏è‚É£: –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?')
    await state.set_state(Reg.name)
    await message.answer(text=text)


@user_router.message(Reg.name)
async def reg_second(message: Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω message | UID: {message.from_user.id} | cb: {message.text} ")
    await state.update_data(name=message.text)
    await state.set_state(Reg.grade)
    text = (f'2Ô∏è‚É£: {message.text}, –≤ –∫–∞–∫–æ–º –∫–ª–∞—Å—Å–µ —Ç—ã —É—á–∏—à—å—Å—è?')
    await message.answer(text=text, reply_markup=kb.choice_grade)


@user_router.message(Reg.grade)
async def reg_third(message: Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω message | UID: {message.from_user.id} | cb: {message.text} ")
    await state.update_data(grade=message.text)
    await state.set_state(Reg.sex)
    text = (f'3Ô∏è‚É£: –ö–∞–∫ –º–Ω–µ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?')
    await message.answer(text=text, reply_markup=kb.choice_sex)


@user_router.message(Reg.sex)
async def reg_final(message: Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω message | UID: {message.from_user.id} | cb: {message.text} ")
    await state.update_data(sex=message.text)
    data = await state.get_data()
    uid = message.from_user.id
    name = str(data["name"])
    grade = int(data["grade"])
    sex = str(data["sex"])
    await create_user(uid=uid, name=name, grade=grade, sex=sex)
    text = ('üéâ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–∫–æ–Ω—á–µ–Ω–∞, —è —Ä–∞–¥, —á—Ç–æ –º—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –ø–æ–±–ª–∏–∂–µ.</b> \n –í –∫–∞—á–µ—Å—Ç–≤–µ <b>–ø–æ–¥–∞—Ä–∫–∞</b> —Ç–µ–±–µ –∑–∞–∫–∏–Ω—É–ª –Ω–µ–º–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞, —á—Ç–æ–±—ã —Ç—ã –º–æ–≥ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—à—É –ø—Ä–æ–≤–µ—Ä–∫—É –ø–∏—Å–µ–º –Ω–µ–π—Ä–æ–Ω–∫–æ–π.\n----------\n‚û°Ô∏è –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!')
    await state.clear()
    await message.answer(text=text, reply_markup=kb.from_register_to_main_menu)


@user_router.callback_query(F.data == "main_menu")
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback | UID: {callback.from_user.id} | cb: {callback.data} ")
    await state.clear()  # —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    text = (f"<b>–ü—Ä–∏–≤–µ—Ç, {await get_user_name(uid=callback.from_user.id)} üëã</b> \n–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:")
    await callback.message.edit_text(text=text, reply_markup=kb.main_menu)
    await callback.answer()


@user_router.callback_query(F.data == "preparation")
async def menu_preparation(callback: CallbackQuery, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback | UID: {callback.from_user.id} | cb: {callback.data} ")
    await state.clear()
    text = ("–û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ –∂–µ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? üîñ")
    await callback.message.edit_text(text=text, reply_markup=kb.preparation)
    await callback.answer()


@user_router.callback_query(F.data == "profile")
async def menu_user_profile(callback: CallbackQuery):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback | UID: {callback.from_user.id} | cb: {callback.data} ")
    uid = callback.from_user.id
    user = await get_user(uid=uid)
    temp = get_percentage(right=user["right_solved"], solved=user["solved"])
    text = (
        '<b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b> üòÄ \n'
        '----------\n'
        f'<b>–ò–º—è</b>: {user["name"]}\n'
        f'<b>–ë–∞–ª–∞–Ω—Å</b>: {user["balance"]} —Ä—É–±.\n'
        f'<b>–ö–ª–∞—Å—Å</b>: {user["grade"]}\n'
        f'<b>–†–µ—à–µ–Ω–æ –≤–µ—Ä–Ω–æ</b>: {user["right_solved"]} ({temp}%)\n'
    )
    await callback.message.edit_text(text=text, reply_markup=kb.profile)
    await callback.answer()


@user_router.callback_query(F.data == "support")
async def menu_support(callback: CallbackQuery):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback | UID: {callback.from_user.id} | cb: {callback.data} ")
    text = (f"–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ @delotbtw")
    await callback.message.edit_text(text=text, reply_markup=kb.back_to_main_menu)
    await callback.answer()


@user_router.callback_query(F.data == "choose_exam_variants")
async def menu_exam_variants(callback: CallbackQuery):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback | UID: {callback.from_user.id} | cb: {callback.data} ")
    text = ("üé≤ –¢–∞–∫, –Ω—É –≤—ã–±–æ—Ä –∑–∞ —Ç–æ–±–æ–π!")
    await callback.message.edit_text(text=text, reply_markup=kb.to_variants)
    await callback.answer()


@user_router.callback_query(F.data == "choose_tamplate_tasks")
async def menu_template_tasks(callback: CallbackQuery):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback | UID: {callback.from_user.id} | cb: {callback.data} ")
    text = ("‚¨áÔ∏è –ß–∞—Å—Ç—å —ç–∫–∑–∞–º–µ–Ω–∞")
    await callback.message.edit_text(text=text, reply_markup=kb.to_template_tasks)
    await callback.answer()


@user_router.callback_query(F.data == "choose_essay")
async def menu_check_mail(callback: CallbackQuery, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback | UID: {callback.from_user.id} | cb: {callback.data} ")
    await state.clear()  # –æ—Ç—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∏—Å—å–º–∞
    text = ("–£—Ö —Ç—ã, —É–∂–µ –µ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç? –ö—Ä—É—Ç–æ! \n–ö–∞–∫–æ–π —Ç–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–±–µ—Ä–µ—à—å?")
    await callback.message.edit_text(text=text, reply_markup=kb.choice_check_by)
    await callback.answer()


@user_router.callback_query(F.data == "check_by_ai")
async def check_by_ai(callback: CallbackQuery, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback | UID: {callback.from_user.id} | cb: {callback.data} ")
    await state.set_state(CheckMail.check_type)
    await state.update_data(check_type='ai')
    text = ("‚¨áÔ∏è –í—ã–±–µ—Ä–∏ –∑–∞–¥–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å ")
    await callback.message.edit_text(text=text, reply_markup=kb.choice_check_task_by_ai)
    await callback.answer()


# todo:  –°–¥–µ–ª–∞—Ç—å –Ω–∞–∫–æ–Ω–µ—Ü —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É —ç—Å—Å–µ
@user_router.callback_query(F.data == 'choice_38_ai')
async def confirm_check_38_ai(callback: CallbackQuery, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback | UID: {callback.from_user.id} | cb: {callback.data} ")
    await state.set_state(CheckMail.task_type)
    await state.update_data(task_type='essay')
    text = ('–°–∫–æ—Ä–æ, –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ üïì')
    await callback.message.edit_text(text=text, reply_markup=kb.confirm_ai_check_38)
    await callback.answer()


# * –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π 37 –∑–∞–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ CHATGPT
@user_router.callback_query(F.data == 'choice_37_ai')
async def confirm_check_37_ai(callback: CallbackQuery, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback | UID: {callback.from_user.id} | cb: {callback.data} ")
    await state.set_state(CheckMail.task_type)
    await state.update_data(task_type='mail')
    text = ('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–π –ø–æ–∫—É–ø–∫–∏ –Ω–∏–∂–µ –∏ –º—ã –Ω–∞—á–∏–∞–Ω–µ–º üí•')
    await callback.message.edit_text(text=text, reply_markup=kb.confirm_ai_check_37)
    await callback.answer()


@user_router.callback_query(F.data == 'confirm_ai_37')
async def check_37(callback: CallbackQuery, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback | UID: {callback.from_user.id} | cb: {callback.data} ")
    user = await get_user(uid=callback.from_user.id)
    if int(user["balance"]) > 149:
        await state.set_state(CheckMail.confirmed)
        await state.update_data(confirmed='1')
        await debit_money(uid=callback.from_user.id, amount=149)
        text = ('–û–∫–µ–π, –¥–µ–Ω—å–≥–∏ —Å –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω—ã. \n–û—Ç–ø—Ä–∞–≤–ª—è–π –º–Ω–µ –ø–∏—Å—å–º–æ.')
        await callback.message.answer(text=text)
    else:
        text = (f'‚ùó <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b> –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: {user["balance"]}\n'
                '–ü–µ—Ä–µ—Ö–æ–¥–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —á—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –≤ –ü—Ä–æ—Ñ–∏–ª–µ')
        await callback.message.edit_text(text=text, reply_markup=kb.back_to_main_menu)
    await callback.answer()


@user_router.message(CheckMail.confirmed, F.text)
async def get_ai_score_37(message: Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω message | UID: {message.from_user.id} | –ü–∏—Å—å–º–æ –Ω–∞ –æ—Ü–µ–Ω–∫—É ")

    chatgpt_answer = await get_score_37(mail_text=message.text)
    clear_asnwer = chatgpt_answer.replace('**', '')  # —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

    text = (f'<b>–û—Ü–µ–Ω–∫–∞ —Ç–≤–æ–µ–≥–æ –ø–∏—Å—å–º–∞:</b> ‚§µÔ∏è \n---------- \n<blockquote>{clear_asnwer}</blockquote> \n')
    text_1 = '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?'

    await state.set_state(CheckMail.check_done)
    await state.update_data(check_done='1')
    await insert_ai_mail_check(uid=message.from_user.id,
                               type='mail',
                               content=message.text,
                               score=clear_asnwer,
                               status=1)
    await message.answer(text=text)
    await message.answer(text=text_1, reply_markup=kb.check_back_to_main_menu)


# * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—Å–µ–≥–æ, —á—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å —Ç–∏–ø–æ–≤—ã–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏ –ø–æ –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—é
@user_router.callback_query(F.data == 'part_audirovanie')
async def choice_audio_div(callback: CallbackQuery, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback | UID: {callback.from_user.id} | cb: {callback.data} ")
    text = '–•–æ—Ä–æ—à–æ, –≤—ã–±–µ—Ä–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ:'
    await state.set_state(SolveTasks.solve_audio)
    await callback.message.edit_text(text=text, reply_markup=kb.audio_choice_div)
    await callback.answer()


@user_router.callback_query(F.data == 'new', SolveTasks.solve_main_content)
@user_router.callback_query(F.data == 'audio_main_content')
async def audio_main_content(callback: CallbackQuery, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback | UID: {callback.from_user.id} | cb: {callback.data} ")
    await state.set_state(SolveTasks.solve_main_content)
    task = await get_random_task(type='main_content')
    text = (
        f'<b>–ó–∞–¥–∞–Ω–∏–µ {task["id"]}</b> \n'
        '---------- \n'
        f'<blockquote>{task["descr"]}</blockquote>\n'
        f'<b>–°—Å—ã–ª–∫–∞ –Ω–∞ –∞—É–¥–∏–æ:</b> {task["descr_url"]} \n'
        f'<b>–û—Ç–≤–µ—Ç:</b> <tg-spoiler>{task["ans"]}</tg-spoiler>'
    )
    await callback.message.edit_text(text=text, reply_markup=kb.audio_solve_task)
    await callback.answer()


@user_router.callback_query(F.data == 'new', SolveTasks.solve_TFNS_search)
@user_router.callback_query(F.data == 'audio_TFNS_search')
async def audio_TFNS_search(callback: CallbackQuery, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback | UID: {callback.from_user.id} | cb: {callback.data} ")
    await state.set_state(SolveTasks.solve_TFNS_search)
    task = await get_random_task(type='TFNS_search')
    text = (
        f'<b>–ó–∞–¥–∞–Ω–∏–µ {task["id"]}</b> \n'
        '---------- \n'
        f'<blockquote>{task["descr"]}</blockquote>\n'
        f'<b>–°—Å—ã–ª–∫–∞ –Ω–∞ –∞—É–¥–∏–æ:</b> {task["descr_url"]} \n'
        f'<b>–û—Ç–≤–µ—Ç:</b> <tg-spoiler>{task["ans"]}</tg-spoiler>'
    )
    await callback.message.edit_text(text=text, reply_markup=kb.audio_solve_task)
    await callback.answer()


@user_router.callback_query(F.data == 'new', SolveTasks.solve_full_understanding)
@user_router.callback_query(F.data == 'audio_full_understanding')
async def audio_full_understanding(callback: CallbackQuery, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback | UID: {callback.from_user.id} | cb: {callback.data} ")
    await state.set_state(SolveTasks.solve_full_understanding)
    task = await get_random_task(type='full_understanding')
    text = (
        f'<b>–ó–∞–¥–∞–Ω–∏–µ {task["id"]}</b> \n'
        '---------- \n'
        f'<blockquote>{task["descr"]}</blockquote>\n'
        f'<b>–°—Å—ã–ª–∫–∞ –Ω–∞ –∞—É–¥–∏–æ:</b> {task["descr_url"]} \n'
        f'<b>–û—Ç–≤–µ—Ç:</b> <tg-spoiler>{task["ans"]}</tg-spoiler>'
    )
    await callback.message.edit_text(text=text, reply_markup=kb.audio_solve_task)
    await callback.answer()


# * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—Å–µ–≥–æ, —á—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å —Ç–∏–ø–æ–≤—ã–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏ –ø–æ —á—Ç–µ–Ω–∏—é
@user_router.callback_query(F.data == 'part_reading')
async def choice_reading_div(callback: CallbackQuery, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback | UID: {callback.from_user.id} | cb: {callback.data} ")
    text = '–•–æ—Ä–æ—à–æ, –≤—ã–±–µ—Ä–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ:'
    await state.set_state(SolveTasks.solve_reading)
    await callback.message.edit_text(text=text, reply_markup=kb.reading_choice_div)
    await callback.answer()


@user_router.callback_query(F.data == 'new', SolveTasks.solve_match)
@user_router.callback_query(F.data == 'reading_match')
async def reading_match(callback: CallbackQuery, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback | UID: {callback.from_user.id} | cb: {callback.data} ")
    await state.set_state(SolveTasks.solve_match)
    task = await get_random_task(type='match')
    text = (
        f'<b>–ó–∞–¥–∞–Ω–∏–µ {task["id"]}</b> \n'
        '---------- \n'
        f'<blockquote>{task["descr"]}</blockquote>\n'
        f'<b>–û—Ç–≤–µ—Ç:</b> <tg-spoiler>{task["ans"]}</tg-spoiler>'
    )
    await callback.message.edit_text(text=text, reply_markup=kb.reading_solve_tasks)
    await callback.answer()


@user_router.callback_query(F.data == 'new', SolveTasks.solve_insert)
@user_router.callback_query(F.data == 'reading_insert')
async def reading_insert(callback: CallbackQuery, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback | UID: {callback.from_user.id} | cb: {callback.data} ")
    await state.set_state(SolveTasks.solve_insert)
    task = await get_random_task(type='insert')
    text = (
        f'<b>–ó–∞–¥–∞–Ω–∏–µ {task["id"]}</b> \n'
        '---------- \n'
        f'<blockquote>{task["descr"]}</blockquote>\n'
        f'<b>–û—Ç–≤–µ—Ç:</b> <tg-spoiler>{task["ans"]}</tg-spoiler>'
    )
    await callback.message.edit_text(text=text, reply_markup=kb.reading_solve_tasks)
    await callback.answer()


@user_router.callback_query(F.data == 'new', SolveTasks.solve_choice_right)
@user_router.callback_query(F.data == 'reading_choice_right')
async def reading_choice_right(callback: CallbackQuery, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback | UID: {callback.from_user.id} | cb: {callback.data} ")
    await state.set_state(SolveTasks.solve_choice_right)
    task = await get_random_task(type='choice_right')
    text = (
        f'<b>–ó–∞–¥–∞–Ω–∏–µ {task["id"]}</b> \n'
        '---------- \n'
        f'<blockquote>{task["descr"]}</blockquote>\n'
        f'<b>–û—Ç–≤–µ—Ç:</b> <tg-spoiler>{task["ans"]}</tg-spoiler>'
    )
    await callback.message.edit_text(text=text, reply_markup=kb.reading_solve_tasks)
    await callback.answer()


# * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—Å–µ–≥–æ, —á—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å —Ç–∏–ø–æ–≤—ã–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏ –ø–æ –≥—Ä–∞–º–º–∞—Ç–∏–∫–µ
@user_router.callback_query(F.data == 'part_grammar')
async def choice_grammar_div(callback: CallbackQuery, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback | UID: {callback.from_user.id} | cb: {callback.data} ")
    text = '–•–æ—Ä–æ—à–æ, –≤—ã–±–µ—Ä–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ:'
    await state.set_state(SolveTasks.solve_grammar)
    await callback.message.edit_text(text=text, reply_markup=kb.grammar_choice_div)
    await callback.answer()


@user_router.callback_query(F.data == 'new', SolveTasks.solve_grammar)
@user_router.callback_query(F.data == 'grammar_grammar')
async def grammar_grammar(callback: CallbackQuery, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback | UID: {callback.from_user.id} | cb: {callback.data} ")
    await state.set_state(SolveTasks.solve_grammar)
    task = await get_random_task(type='grammar')
    text = (
        f'<b>–ó–∞–¥–∞–Ω–∏–µ {task["id"]}</b> \n'
        '---------- \n'
        f'<blockquote>{task["descr"]}</blockquote>\n'
        f'<b>–û—Ç–≤–µ—Ç:</b> <tg-spoiler>{task["ans"]}</tg-spoiler>'
    )
    await callback.message.edit_text(text=text, reply_markup=kb.grammar_solve_tasks)
    await callback.answer()


@user_router.callback_query(F.data == 'new', SolveTasks.solve_vocabulary)
@user_router.callback_query(F.data == 'grammar_vocabulary')
async def grammar_vocabulary(callback: CallbackQuery, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback | UID: {callback.from_user.id} | cb: {callback.data} ")
    await state.set_state(SolveTasks.solve_vocabulary)
    task = await get_random_task(type='vocabulary')
    text = (
        f'<b>–ó–∞–¥–∞–Ω–∏–µ {task["id"]}</b> \n'
        '---------- \n'
        f'<blockquote>{task["descr"]}</blockquote>\n'
        f'<b>–û—Ç–≤–µ—Ç:</b> <tg-spoiler>{task["ans"]}</tg-spoiler>'
    )
    await callback.message.edit_text(text=text, reply_markup=kb.grammar_solve_tasks)
    await callback.answer()


# * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—Å–µ–≥–æ, —á—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å —Ç–∏–ø–æ–≤—ã–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏ –ø–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—é –ø–∏—Å—å–º–∞
@user_router.callback_query(F.data == 'part_mail')
async def choice_mail_div(callback: CallbackQuery, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback | UID: {callback.from_user.id} | cb: {callback.data} ")
    text = '–•–æ—Ä–æ—à–æ, –≤—ã–±–µ—Ä–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ:'
    await state.set_state(SolveTasks.solve_mails)
    await callback.message.edit_text(text=text, reply_markup=kb.mail_choice_div)
    await callback.answer()


@user_router.callback_query(F.data == 'new', SolveTasks.solve_mail)
@user_router.callback_query(F.data == 'mail_mail')
async def mail_mail(callback: CallbackQuery, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback | UID: {callback.from_user.id} | cb: {callback.data} ")
    await state.set_state(SolveTasks.solve_mail)
    task = await get_random_task(type='mail')
    text = (
        f'<b>–ó–∞–¥–∞–Ω–∏–µ {task["id"]}</b> \n'
        '---------- \n'
        f'<blockquote>{task["descr"]}</blockquote>\n'
    )
    await callback.message.edit_text(text=text, reply_markup=kb.mail_solve_tasks)
    await callback.answer()


@user_router.callback_query(F.data == 'new', SolveTasks.solve_essay)
@user_router.callback_query(F.data == 'mail_essay')
async def mail_essay(callback: CallbackQuery, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback | UID: {callback.from_user.id} | cb: {callback.data} ")
    await state.set_state(SolveTasks.solve_essay)
    task = await get_random_task(type='essay')
    text = (
        f'<b>–ó–∞–¥–∞–Ω–∏–µ {task["id"]}</b> \n'
        '---------- \n'
        f'<blockquote>{task["descr"]}</blockquote>\n'
    )
    await callback.message.edit_text(text=text, reply_markup=kb.mail_solve_tasks)
    await callback.answer()

# * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–µ—Ä–Ω–æ/–Ω–µ–≤–µ—Ä–Ω–æ —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π


@user_router.callback_query(F.data == 'right')
async def solve_right(callback: CallbackQuery):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback | UID: {callback.from_user.id} | cb: {callback.data} ")
    await write_solve(uid=callback.from_user.id, solved=1, right_solved=1)
    await callback.answer(text='–ó–∞–ø–∏—Å–∞–Ω–æ')


@user_router.callback_query(F.data == 'wrong')
async def solve_wrong(callback: CallbackQuery):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback | UID: {callback.from_user.id} | cb: {callback.data} ")
    await write_solve(uid=callback.from_user.id, solved=1, right_solved=0)
    await callback.answer(text='–ó–∞–ø–∏—Å–∞–Ω–æ')


#! –ó–∞–≥–ª—É—à–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏
@user_router.callback_query(F.data == "check_by_expert")
async def check_by_expert(callback: CallbackQuery):
    text = ('–°–∫–æ—Ä–æ, –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ üïì')
    await callback.message.edit_text(text=text, reply_markup=kb.back_to_essay)
    await callback.answer()


@user_router.callback_query(F.data == "variant")
async def done_variants(callback: CallbackQuery):
    text = ('–°–∫–æ—Ä–æ, –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ üïì')
    await callback.message.edit_text(text=text, reply_markup=kb.back_to_variants)
    await callback.answer()


@user_router.callback_query(F.data == "variant_random")
async def random_variant(callback: CallbackQuery):
    text = ('–°–∫–æ—Ä–æ, –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ üïì')
    await callback.message.edit_text(text=text, reply_markup=kb.back_to_variants)
    await callback.answer()


@user_router.callback_query(F.data == "part_audirovanie")
async def part_audio(callback: CallbackQuery):
    text = ('–°–∫–æ—Ä–æ, –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ üïì')
    await callback.message.edit_text(text=text, reply_markup=kb.back_to_template_tasks)
    await callback.answer()


@user_router.callback_query(F.data == "part_grammar")
async def part_grammar(callback: CallbackQuery):
    text = ('–°–∫–æ—Ä–æ, –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ üïì')
    await callback.message.edit_text(text=text, reply_markup=kb.back_to_template_tasks)
    await callback.answer()


@user_router.callback_query(F.data == "part_mail")
async def part_mail(callback: CallbackQuery):
    text = ('–°–∫–æ—Ä–æ, –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ üïì')
    await callback.message.edit_text(text=text, reply_markup=kb.back_to_template_tasks)
    await callback.answer()
