from aiogram import F, Router, types
from aiogram.enums import ParseMode
from db.db_functions import *
from app.modules import keyboards as kb

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
# ------------------------------------
p_html = ParseMode.HTML
router = Router()


# –ü—Ä–∏–≤–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
# ------------------------------------
@router.message(F.text == '/start')
async def send_welcome(message: types.Message) -> None:
    # f'<b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} </b>üëã\n'
    text = (
        f'–ú–µ–Ω—è –∑–æ–≤—É—Ç <b>–¢—å—é—Ç–æ—Ä</b>, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ï–ì–≠ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É!\n'
    )

    # –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
    create_user(tg_id=message.from_user.id, name=message.from_user.first_name)
    await message.answer(text=text, reply_markup=kb.start, parse_mode=p_html)


# –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–µ—Ä–≤–∏—á–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –∏ –∫–ª–∞—Å—Å–µ —é–∑–µ—Ä–∞ –≤ –ë–î
# ------------------------------------
@router.message(F.text.in_(['10', '11', '–ü—Ä–æ–≥—É–ª–∏–≤–∞—é—Å—å –º–∏–º–æ üö∂']))
async def paste_class(message: types.Message) -> None:
    # –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
    paste_grade(tg_id=message.from_user.id, grade=message.text)
    text = (
        '–û—Ç–ª–∏—á–Ω–æ, —è —É–∑–Ω–∞–ª –æ —Ç–µ–±–µ –≤—Å–µ, —á—Ç–æ –º–Ω–µ —Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å!\n'
        '–ì–æ—Ç–æ–≤ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Å–≤–æ–µ–π –ª—É—á—à–µ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –ï–ì–≠? ü§©'
    )
    await message.delete()
    await message.answer(text=text, reply_markup=kb.agree_to_start, parse_mode=p_html)


# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
# ------------------------------------
@router.callback_query(F.data == "main_menu")
async def back_to_main_menu(callback: types.CallbackQuery) -> None:
    text = (
        f"<b>–ü—Ä–∏–≤–µ—Ç, {
        callback.from_user.first_name} üëã</b> \n–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:"
    )
    await callback.message.edit_text(text=text, reply_markup=kb.main_menu, parse_mode=p_html)
    await callback.answer()


# –ú–µ–Ω—é "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞"
# ------------------------------------
@router.callback_query(F.data == "preparation")
async def menu_preparation(callback: types.CallbackQuery) -> None:
    text = (
        "–û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ –∂–µ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
    )
    await callback.message.edit_text(text=text, reply_markup=kb.preparation, parse_mode=p_html)
    await callback.answer()


# –ú–µ–Ω—é –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# ------------------------------------
@router.callback_query(F.data == "user_cabinet")
async def menu_user_profile(callback: types.CallbackQuery) -> None:
    tg_id = callback.from_user.id
    user_info = get_userinfo(tg_id=tg_id)
    name, grade, task_solved, task_solved_right = user_info[
        1], user_info[3], user_info[4], user_info[5]
    temp = calc_percentage(right=task_solved_right, solved=task_solved)
    text = (
        f'<b>–ò–º—è:</b> {name}\n'
        f'<b>–ö–ª–∞—Å—Å:</b> {grade}\n'
        f'<b>–ó–∞–¥–∞–Ω–∏–π —Ä–µ—à–µ–Ω–æ:</b> {task_solved}\n'
        f'<b>–†–µ—à–µ–Ω–æ –≤–µ—Ä–Ω–æ:</b> {task_solved_right} ({temp}%)'
    )
    await callback.message.edit_text(text=text, reply_markup=kb.back_to_main_menu, parse_mode=p_html)
    await callback.answer()


# –ú–µ–Ω—é —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
# ------------------------------------
@router.callback_query(F.data == "support")
async def menu_support(callback: types.CallbackQuery) -> None:
    text = (
        "–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è: @delotbtw"
    )
    await callback.message.edit_text(text=text, reply_markup=kb.back_to_main_menu, parse_mode=p_html)


# –í—ã–±–æ—Ä –≥–æ—Ç–æ–≤–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
# ------------------------------------
@router.callback_query(F.data == "choose_exam_variants")
async def menu_exam_variants(callback: types.CallbackQuery) -> None:
    text = (
        "–¢–∞–∫, –Ω—É –≤—ã–±–æ—Ä –∑–∞ —Ç–æ–±–æ–π!"
    )
    await callback.message.edit_text(text=text, reply_markup=kb.variants, parse_mode=p_html)
    await callback.answer()


# –í—ã–±–æ—Ä —Ç–∏–ø–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π
# ------------------------------------
@router.callback_query(F.data == "choose_tamplate_tasks")
async def menu_template_tasks(callback: types.CallbackQuery) -> None:
    text = (
        "–ß–∞—Å—Ç—å —ç–∫–∑–∞–º–µ–Ω–∞:"
    )
    await callback.message.edit_text(text=text, reply_markup=kb.template_tasks, parse_mode=p_html)
    await callback.answer()


# –†–∞–∑–¥–µ–ª —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–∏—Å—å–º–∞
# ------------------------------------
@router.callback_query(F.data == "choose_essay")
async def menu_check_mail(callback: types.CallbackQuery) -> None:
    text = (
        "–£—Ö —Ç—ã, —É–∂–µ –µ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç? –ö—Ä—É—Ç–æ! \n–ö–∞–∫–æ–π —Ç–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–±–µ—Ä–µ—à—å?"
    )
    await callback.message.edit_text(text=text, reply_markup=kb.check_by_choice, parse_mode=p_html)
    await callback.answer()


# !–¢–£–ü–û –ó–ê–ì–õ–£–®–ö–ò –î–õ–Ø –ö–ù–û–ü–û–ö, –ü–û–ö–ê –ù–ï –ù–ê–ü–ò–®–£ –ü–û–î –ù–ò–• –ö–û–î!
# ? –ó–∞–≥–ª—É—à–∫–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —ç–∫—Å–ø–µ—Ä—Ç–æ–º
# ------------------------------------
@router.callback_query(F.data == "check_by_expert")
async def check_by_expert(callback: types.CallbackQuery) -> None:
    text = (
        "–ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, —Å–∫–æ—Ä–æ –∏—Å–ø—Ä–∞–≤–∏–º üòÜ"
    )
    await callback.message.edit_text(text=text, reply_markup=kb.back_to_essay, parse_mode=p_html)
    await callback.answer()


# ? –ó–∞–≥–ª—É—à–∫–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ–π—Ä–æ–Ω–∫–æ–π
# ------------------------------------
@router.callback_query(F.data == "check_by_ai")
async def check_by_ai(callback: types.CallbackQuery) -> None:
    text = (
        "–ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, —Å–∫–æ—Ä–æ –∏—Å–ø—Ä–∞–≤–∏–º üòÜ"
    )
    await callback.message.edit_text(text=text, reply_markup=kb.back_to_essay, parse_mode=p_html)
    await callback.answer()


# ? –ó–∞–≥–ª—É—à–∫–∞ –Ω–∞ –≥–æ—Ç–æ–≤—ã–µ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
# ------------------------------------
@router.callback_query(F.data == "variant")
async def done_variants(callback: types.CallbackQuery) -> None:
    text = (
        "–ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, —Å–∫–æ—Ä–æ –∏—Å–ø—Ä–∞–≤–∏–º üòÜ"
    )
    await callback.message.edit_text(text=text, reply_markup=kb.back_to_variants, parse_mode=p_html)
    await callback.answer()


# ? –ó–∞–≥–ª—É—à–∫–∞ –Ω–∞ —Ä–∞–Ω–¥–æ–º–Ω—ã–π –≤–∞—Ä–∏–Ω–∞—Ç
# ------------------------------------
@router.callback_query(F.data == "variant_random")
async def random_variant(callback: types.CallbackQuery) -> None:
    text = (
        "–ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, —Å–∫–æ—Ä–æ –∏—Å–ø—Ä–∞–≤–∏–º üòÜ"
    )
    await callback.message.edit_text(text=text, reply_markup=kb.back_to_variants, parse_mode=p_html)
    await callback.answer()


# ? –ó–∞–≥–ª—É—à–∫–∞ –Ω–∞ –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
# ------------------------------------
@router.callback_query(F.data == "part_audirovanie")
async def part_audio(callback: types.CallbackQuery) -> None:
    text = (
        "–ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, —Å–∫–æ—Ä–æ –∏—Å–ø—Ä–∞–≤–∏–º üòÜ"
    )
    await callback.message.edit_text(text=text, reply_markup=kb.back_to_template_tasks, parse_mode=p_html)
    await callback.answer()


# ? –ó–∞–≥–ª—É—à–∫–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ
# ------------------------------------
@router.callback_query(F.data == "part_reading")
async def part_reading(callback: types.CallbackQuery) -> None:
    text = (
        "–ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, —Å–∫–æ—Ä–æ –∏—Å–ø—Ä–∞–≤–∏–º üòÜ"
    )
    await callback.message.edit_text(text=text, reply_markup=kb.back_to_template_tasks, parse_mode=p_html)
    await callback.answer()


# ? –ó–∞–≥–ª—É—à–∫–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ
# ------------------------------------
@router.callback_query(F.data == "part_grammar")
async def part_grammar(callback: types.CallbackQuery) -> None:
    text = (
        "–ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, —Å–∫–æ—Ä–æ –∏—Å–ø—Ä–∞–≤–∏–º üòÜ"
    )
    await callback.message.edit_text(text=text, reply_markup=kb.back_to_template_tasks, parse_mode=p_html)
    await callback.answer()


# ? –ó–∞–≥–ª—É—à–∫–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ
# ------------------------------------
@router.callback_query(F.data == "part_mail")
async def part_mail(callback: types.CallbackQuery) -> None:
    text = (
        "–ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, —Å–∫–æ—Ä–æ –∏—Å–ø—Ä–∞–≤–∏–º üòÜ"
    )
    await callback.message.edit_text(text=text, reply_markup=kb.back_to_template_tasks, parse_mode=p_html)
    await callback.answer()
